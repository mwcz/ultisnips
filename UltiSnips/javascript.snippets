###########################################################################
#                            TextMate Snippets                            #
###########################################################################

################
# DOM snippets #
################

snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

############################
# Object property snippets #
############################

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function (${3:arguments}){
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

# doesn't work...
<<<<<<< HEAD
snippet .*has "hasOwnProperty" r
hasOwnProperty(${1})
endsnippet

snippet tou "typeof === 'undefined'"
typeof ${1:object}$0 === "undefined"
endsnippet

=======
snippet has "hasOwnProperty"
hasOwnProperty(${1})
endsnippet

>>>>>>> organize javaascript snippets and add some ones from snipmate
###############
# OO snippets #
###############

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};
endsnippet
<<<<<<< HEAD
=======

snippet sdf "self-defining function"
var ${1:function_name} = function (${2:argument}) {
	${3:// initial code ...}

	$1 = function ($2) {
		${4:${VISUAL:\/\/ main code}}
	};
};
>>>>>>> organize javaascript snippets and add some ones from snipmate

snippet sdf "self-defining function"
var ${1:function_name} = function (${2:argument}) {
	${3:// initial code ...}

	$1 = function ($2) {
		${4:${VISUAL:\/\/ main code}}
	};
};
endsnippet

snippet sing "singleton"
function ${1:Singleton} (${2:argument}) {
	// the cached instance
	var instance;

	// rewrite the constructor
	$1 = function $1($2) {
		return instance;
	};
<<<<<<< HEAD

=======
	
>>>>>>> organize javaascript snippets and add some ones from snipmate
	// carry over the prototype properties
	$1.prototype = this;

	// the instance
	instance = new $1();

	// reset the constructor pointer
	instance.constructor = $1;

<<<<<<< HEAD
<<<<<<< HEAD
	${3:${VISUAL:\/\/ code ...}}
=======
	${3:// code ...}
>>>>>>> organize javaascript snippets and add some ones from snipmate
=======
	${3:${VISUAL:\/\/ code ...}}
>>>>>>> add VISUAL tags to some js snippets

	return instance;
}
endsnippet

#################
# Loop snippets #
#################

snippet for "for (...) {...}"
var ${1:i};
for ($1 = 0; $1 < ${2:Things}.length; $1 += 1) {
<<<<<<< HEAD
<<<<<<< HEAD
	${3:$2[$1]};
	${VISUAL}$0
=======
	${3:$2[$1]}${VISUAL}$0
>>>>>>> organize javaascript snippets and add some ones from snipmate
=======
	${3:$2[$1]};
	${VISUAL}$0
>>>>>>> add VISUAL tags to some js snippets
}
endsnippet

snippet forr "for (...) {...} (faster)"
var ${1:i};
for ($1 = ${2:Things}.length - 1; $1 >= 0; $1 -= 1){
<<<<<<< HEAD
<<<<<<< HEAD
	${3:$2[$1]};
=======
	${3:$2[$1]}${VISUAL}$0
=======
	${3:$2[$1]};
	${VISUAL}$0
>>>>>>> add VISUAL tags to some js snippets
}
endsnippet

snippet fori "for (property in object ) { ... }"
var ${1:prop};
for ($1 in ${2:Things}) {
	${3:$2[$1]}
}
endsnippet

snippet wh "while (...) {...}"
while (${1:condition}) {
>>>>>>> organize javaascript snippets and add some ones from snipmate
	${VISUAL}$0
}
endsnippet

<<<<<<< HEAD
snippet fori "for (property in object ) { ... }"
var ${1:prop};
for ($1 in ${2:Things}) {
	${3:$2[$1]}
}
endsnippet

snippet wh "while (...) {...}"
while (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet do "do...while"
do {
	${VISUAL}$0
=======
snippet do "do...while"
do {
	${VISUAL}$0
>>>>>>> organize javaascript snippets and add some ones from snipmate
} while (${1:/* condition */});
endsnippet

########################
# Conditional snippets #
########################

snippet if "if"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
<<<<<<< HEAD
<<<<<<< HEAD
	${2:${VISUAL:\/\/ code ...}}
=======
	${2://code}
>>>>>>> organize javaascript snippets and add some ones from snipmate
=======
	${2:${VISUAL:\/\/ code ...}}
>>>>>>> add VISUAL tags to some js snippets
}
else {
	${3://code}
}
endsnippet

snippet ter "tertiary conditional"
${1:condition} ? ${2:a} : ${3:b}
endsnippet

snippet ? "tertiary conditional"
${1:condition} ? ${2:a} : ${3:b}
endsnippet

snippet try "try catch construct"
try {
<<<<<<< HEAD
<<<<<<< HEAD
	${1:${VISUAL:\/\/ code ...}}
=======
	${1:/* code */}
>>>>>>> organize javaascript snippets and add some ones from snipmate
=======
	${1:${VISUAL:\/\/ code ...}}
>>>>>>> add VISUAL tags to some js snippets
} catch (${2:e}) {
	${3:/* handle error */}
}
endsnippet

snippet switch "switch statement"
switch (${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
<<<<<<< HEAD
<<<<<<< HEAD
		${2:${VISUAL:\/\/ code ...}}
}
endsnippet

snippet case "case clause"
case '${1:case}':
	${2:${VISUAL:\/\/ code ...}}
	break;
${3}
endsnippet

#####################
# Function snippets #
#####################

snippet f "Anonymous Function"
function (${1}) {
	${3}
}${2:;}
endsnippet

snippet fun "function (fun)"
function ${1:function_name} (${2:argument}) {
	${VISUAL}$0
}
endsnippet

=======
		${2:// code}
=======
		${2:${VISUAL:\/\/ code ...}}
>>>>>>> add VISUAL tags to some js snippets
}
endsnippet

snippet case "case clause"
case '${1:case}':
	${2:${VISUAL:\/\/ code ...}}
	break;
${3}
endsnippet

#####################
# Function snippets #
#####################

snippet f "Anonymous Function"
function (${1}) {
	${3}
}${2:;}
endsnippet

snippet fun "function (fun)"
function ${1:function_name} (${2:argument}) {
	${VISUAL}$0
}
endsnippet

>>>>>>> organize javaascript snippets and add some ones from snipmate
snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet (f "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

######################################
# snippets for standard JS functions #
######################################

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet jsonp "JSON.parse"
JSON.parse(${1:string});
endsnippet

snippet jsons "JSON.stringify"
JSON.stringify(${1:object});
endsnippet

####################
# console snippets #
####################

snippet cl "console.log"
console.log(${1:"${2:value}"});
endsnippet

snippet cw "console.warn"
console.warn(${1:"${2:value}"});
endsnippet

snippet ce "console.error"
console.error(${1:"${2:value}"});
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp("${1:label}")
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

###################################################
#  AMD (Asynchronous Module Definition) snippets  #
###################################################

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet

##############################################
# ES5 snippets (may be too broad a category) #
##############################################

snippet us "use strict mode"
"use strict";
endsnippet

snippet props "Define multiple properties"
var ${1:my_object} = Object.defineProperties(
	${2:new Object()},
	{
		${3:property} : {
			get : function $1_$3_getter() {
				// getter code
			},
			set : function $1_$3_setter(value) {
				// setter code
			},
			value        : ${4:value},
			writeable    : ${5:true},
			enumerable   : ${6:true},
			configurable : ${7:true}
		}
	}
);
endsnippet

snippet prop "Define single property"
Object.defineProperty(
	${1:object},
	"${2:property}",
	{
		get : function $1_$2_getter() {
			// getter code
		},
		set : function $1_$2_setter(value) {
			// setter code
		},
		value        : ${3:value},
		writeable    : ${4:true},
		enumerable   : ${5:true},
		configurable : ${6:true}
	}
);
endsnippet

##################
# JSDoc snippets #
##################

snippet /** "docstring"
/**
 * ${1:description}
 *
 */
endsnippet

snippet @par "@param"
@param {${1:type}} ${2:name} ${3:description}
endsnippet

snippet @ret "@return"
@return {${1:type}} ${2:description}
endsnippet

##########################################
# OooOoOooOooooOooOooO ghost snippets... #
##########################################

# vim:ft=snippets:
